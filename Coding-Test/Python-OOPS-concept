class Book:
    def __init__(self, title, author, isbn, genre, quantity):
        self.title = title
        self.author = author
        self.isbn = isbn
        self.genre = genre
        self.quantity = quantity
        self.available_quantity = quantity  # Initially all copies are available

    def update_quantity(self, new_quantity):
        self.quantity = new_quantity
        self.available_quantity = new_quantity  # Reset available copies when quantity is updated

    def decrease_quantity(self):
        if self.available_quantity > 0:
            self.available_quantity -= 1
            return True
        else:
            return False

    def increase_quantity(self):
        self.quantity += 1
        self.available_quantity += 1

    def __str__(self):
        return f"{self.title} by {self.author}"

class Borrower:
    def __init__(self, name, contact, membership_id):
        self.name = name
        self.contact = contact
        self.membership_id = membership_id

    def update_contact(self, new_contact):
        self.contact = new_contact

    def __str__(self):
        return f"{self.name} (Member ID: {self.membership_id})"
    

class Library:
    def __init__(self):
        self.books = []
        self.borrowers = []
        self.borrowed_books = {}  # {membership_id: [list of books]}
    
    def add_book(self, book):
        self.books.append(book)

    def remove_book(self, book):
        if book in self.books:
            self.books.remove(book)

    def add_borrower(self, borrower):
        self.borrowers.append(borrower)

    def remove_borrower(self, borrower):
        if borrower in self.borrowers:
            self.borrowers.remove(borrower)
            if borrower.membership_id in self.borrowed_books:
                del self.borrowed_books[borrower.membership_id]

    def borrow_book(self, borrower, book):
        if book in self.books and book.available_quantity > 0:
            if borrower.membership_id in self.borrowed_books:
                self.borrowed_books[borrower.membership_id].append(book)
            else:
                self.borrowed_books[borrower.membership_id] = [book]
            book.decrease_quantity()
            return True
        else:
            return False

    def return_book(self, borrower, book):
        if borrower.membership_id in self.borrowed_books and book in self.borrowed_books[borrower.membership_id]:
            self.borrowed_books[borrower.membership_id].remove(book)
            book.increase_quantity()
            return True
        else:
            return False

    def search_books(self, keyword):
        found_books = []
        for book in self.books:
            if keyword.lower() in book.title.lower() or keyword.lower() in book.author.lower() or keyword.lower() in book.genre.lower():
                found_books.append(book)
        return found_books

    def show_available_books(self):
        for book in self.books:
            print(f"{book}: Available Copies: {book.available_quantity}")


if __name__ == "__main__":
    # Create Library
    library = Library()

    # Add Books
    book1 = Book("Harry Potter and the Philosopher's Stone", "J.K. Rowling", "9780590353427", "Fantasy", 3)
    book2 = Book("The Catcher in the Rye", "J.D. Salinger", "9780316769488", "Fiction", 5)
    library.add_book(book1)
    library.add_book(book2)

    # Add Borrowers
    borrower1 = Borrower("John Doe", "john.doe@email.com", "B001")
    borrower2 = Borrower("Jane Smith", "jane.smith@email.com", "B002")
    library.add_borrower(borrower1)
    library.add_borrower(borrower2)

    # Borrowing a Book
    library.borrow_book(borrower1, book1)
    library.borrow_book(borrower1, book2)
    library.borrow_book(borrower2, book2)

    # Display Available Books
    print("Available Books:")
    library.show_available_books()

    # Returning a Book
    library.return_book(borrower1, book1)

    # Display Available Books
    print("\nAvailable Books after returning:")
    library.show_available_books()

    # Searching for Books
    print("\nSearch Results for 'Harry Potter':")
    search_results = library.search_books("Harry Potter")
    for book in search_results:
        print(f"{book}: Available Copies: {book.available_quantity}")

    # Removing Borrowers
    library.remove_borrower(borrower1)

    # Attempting to borrow with removed borrower
    library.borrow_book(borrower1, book1)  # This should fail






























    